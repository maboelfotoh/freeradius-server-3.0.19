# -*- text -*-
#
#  main/mysql/queries.conf-- MySQL configuration for default schema (schema.sql)
#
#  $Id: 167d42b8a18fbe86be09087c690774d03c835c42 $

# Use the driver specific SQL escape method.
#
# If you enable this configuration item, the "safe_characters"
# configuration is ignored.  FreeRADIUS then uses the MySQL escape
# functions to escape input strings.  The only downside to making this
# change is that the MySQL escaping method is not the same the one
# used by FreeRADIUS.  So characters which are NOT in the
# "safe_characters" list will now be stored differently in the database.
#
#auto_escape = yes

# Safe characters list for sql queries. Everything else is replaced
# with their mime-encoded equivalents.
# The default list should be ok
# Using 'auto_escape' is preferred
safe_characters = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_: /"

#######################################################################
#  Connection config
#######################################################################
# The character set is not configurable. The default character set of
# the mysql client library is used. To control the character set,
# create/edit my.cnf (typically in /etc/mysql/my.cnf or /etc/my.cnf)
# and enter
# [client]
# default-character-set = utf8
#

#######################################################################
#  Query config:  Username
#######################################################################
# This is the username that will get substituted, escaped, and added
# as attribute 'SQL-User-Name'. '%{SQL-User-Name}' should be used below
# everywhere a username substitution is needed so you you can be sure
# the username passed from the client is escaped properly.
#
# Uncomment the next line, if you want the sql_user_name to mean:
#
#	Use Stripped-User-Name, if it's there.
#	Else use User-Name, if it's there,
#	Else use hard-coded string "DEFAULT" as the user name.
#sql_user_name = "%{%{Stripped-User-Name}:-%{%{User-Name}:-DEFAULT}}"
#
sql_user_name = "%{User-Name}"

#######################################################################
# Default profile
#######################################################################
# This is the default profile. It is found in SQL by group membership.
# That means that this profile must be a member of at least one group
# which will contain the corresponding check and reply items.
# This profile will be queried in the authorize section for every user.
# The point is to assign all users a default profile without having to
# manually add each one to a group that will contain the profile.
# The SQL module will also honor the User-Profile attribute. This
# attribute can be set anywhere in the authorize section (ie the users
# file). It is found exactly as the default profile is found.
# If it is set then it will *overwrite* the default profile setting.
# The idea is to select profiles based on checks on the incoming packets,
# not on user group membership. For example:
# -- users file --
# DEFAULT	Service-Type == Outbound-User, User-Profile := "outbound"
# DEFAULT	Service-Type == Framed-User, User-Profile := "framed"
#
# By default the default_user_profile is not set
#
#default_user_profile = "DEFAULT"

#######################################################################
# NAS Query
#######################################################################
# This query retrieves the radius clients
#
# 0. Row ID (currently unused)
# 1. Name (or IP address)
# 2. Shortname
# 3. Type
# 4. Secret
# 5. Server
#######################################################################

client_query = "call getClients()"

#######################################################################
# Authorization Queries
#######################################################################
# These queries compare the check items for the user
# in ${authcheck_table} and setup the reply items in
# ${authreply_table}. You can use any query/tables
# you want, but the return data for each row MUST
# be in the following order:
#
# 0. Row ID (currently unused)
# 1. UserName/GroupName
# 2. Item Attr Name
# 3. Item Attr Value
# 4. Item Attr Operation
#######################################################################

#
#  The default queries are case insensitive. (for compatibility with
#  older versions of FreeRADIUS)
#
authorize_check_query = "call authorizeCheck('%{SQL-User-Name}')"

authorize_reply_query = "call authorizeReply('%{SQL-User-Name}')"

group_membership_query = "call authorizeGroupMembership('%{SQL-User-Name}')"

authorize_group_check_query = "call authorizeGroupCheck('%{${group_attribute}}')"

authorize_group_reply_query = "call authorizeGroupReply('%{${group_attribute}}')"

#######################################################################
# Simultaneous Use Checking Queries
#######################################################################
# simul_count_query	- query for the number of current connections
#			- If this is not defined, no simultaneous use checking
#			- will be performed by this module instance
# simul_verify_query	- query to return details of current connections
#				for verification
#			- Leave blank or commented out to disable verification step
#			- Note that the returned field order should not be changed.
#######################################################################

simul_count_query = "call simulCount('%{SQL-User-Name}')"

simul_verify_query = "call simulVerify('%{SQL-User-Name}')"

#######################################################################
# Accounting and Post-Auth Queries
#######################################################################
# These queries insert/update accounting and authentication records.
# The query to use is determined by the value of 'reference'.
# This value is used as a configuration path and should resolve to one
# or more 'query's. If reference points to multiple queries, and a query
# fails, the next query is executed.
#
# Behaviour is identical to the old 1.x/2.x module, except we can now
# fail between N queries, and query selection can be based on any
# combination of attributes, or custom 'Acct-Status-Type' values.
#######################################################################
accounting {
	reference = "%{tolower:type.%{%{Acct-Status-Type}:-%{Request-Processing-Stage}}.query}"

	# Write SQL queries to a logfile. This is potentially useful for bulk inserts
	# when used with the rlm_sql_null driver.
#	logfile = ${logdir}/accounting.sql

	type {
		accounting-on {
			#
			#  Bulk terminate all sessions associated with a given NAS
			#
			query = "call nasSessionsTerminate(\
						%{integer:Event-Timestamp}, \
						'%{%{Acct-Terminate-Cause}:-NAS-Reboot}', \
						'%{NAS-IP-Address}')"
		}

		accounting-off {
			query = "${..accounting-on.query}"
		}

		#
		#  Implement the "sql_session_start" policy.
		#  See raddb/policy.d/accounting for more details.
		#
		#  You also need to fix the other queries as
		#  documented below.  Look for "sql_session_start".
		#
		post-auth {
			query = "call postAuth(\
				'%{Acct-Session-Id}', \
				'%{Acct-Unique-Session-Id}', \
				'%{SQL-User-Name}', \
				'%{Realm}', \
				'%{%{NAS-IPv6-Address}:-%{NAS-IP-Address}}', \
				'%{%{NAS-Port-ID}:-%{NAS-Port}}', \
				'%{NAS-Port-Type}', \
				%{integer:Event-Timestamp}, \
				'%{Connect-Info}', \
				'%{Called-Station-Id}', \
				'%{Calling-Station-Id}', \
				'%{Service-Type}')"

			query = "call postAuth2(%{integer:Event-Timestamp}, \
					'%{Connect-Info}', \
					'%{Acct-Session-Id}', \
					'%{SQL-User-Name}', \
					'%{%{NAS-IPv6-Address}:-%{NAS-IP-Address}}', \
					'%{%{NAS-Port-ID}:-%{NAS-Port}}', \
					'%{NAS-Port-Type}')"
		}

		start {
			#
			#  Insert a new record into the sessions table
			#
			query = "call sessionInsert('%{Acct-Session-Id}', \
					'%{Acct-Unique-Session-Id}', \
					'%{SQL-User-Name}', \
					'%{Realm}', \
					'%{NAS-IP-Address}', \
					'%{%{NAS-Port-ID}:-%{NAS-Port}}', \
					'%{NAS-Port-Type}', \
					%{integer:Event-Timestamp}, \
					'%{Acct-Authentic}', \
					'%{Connect-Info}', \
					'%{Called-Station-Id}', \
					'%{Calling-Station-Id}', \
					'%{Service-Type}', \
					'%{Framed-Protocol}', \
					'%{Framed-IP-Address}', \
					'%{Framed-IPv6-Address}', \
					'%{Framed-IPv6-Prefix}', \
					'%{Framed-Interface-Id}', \
					'%{Delegated-IPv6-Prefix}')"

			#
			#  When using "sql_session_start", you should comment out
			#  the previous query, and enable this one.
			#
			#  Just change the previous query to "-query",
			#  and this one to "query".  The previous one
			#  will be ignored, and this one will be
			#  enabled.
			#
			-query = "call sqlSessionInsert('%{Acct-Session-Id}', \
					'%{Acct-Unique-Session-Id}', \
					'%{Acct-Authentic}', \
					'%{Connect-Info}', \
					'%{Service-Type}', \
					'%{Framed-Protocol}', \
					'%{Framed-IP-Address}', \
					'%{Framed-IPv6-Address}', \
					'%{Framed-IPv6-Prefix}', \
					'%{Framed-Interface-Id}', \
					'%{Delegated-IPv6-Prefix}', \
					%{integer:Event-Timestamp}, \
					'%{SQL-User-Name}', \
					'%{%{NAS-IPv6-Address}:-%{NAS-IP-Address}}', \
					'%{%{NAS-Port-ID}:-%{NAS-Port}}', \
					'%{NAS-Port-Type}')"

			#
			#  Key constraints prevented us from inserting a new session,
			#  use the alternate query to update an existing session.
			#
			query = "call sqlAlternateSessionInsert(%{integer:Event-Timestamp}, \
					'%{Connect-Info}', \
					'%{Acct-Unique-Session-Id}')"

		}

		interim-update {
			#
			#  Update an existing session and calculate the interval
			#  between the last data we received for the session and this
			#  update. This can be used to find stale sessions.
			#
			query = "call sessionUpdate(%{integer:Event-Timestamp}, \
					%{integer:Event-Timestamp}, \
					'%{Framed-IP-Address}', \
					'%{Framed-IPv6-Address}', \
					'%{Framed-IPv6-Prefix}', \
					'%{Framed-Interface-Id}', \
					'%{Delegated-IPv6-Prefix}', \
					%{%{Acct-Session-Time}:-NULL}, \
					'%{%{Acct-Input-Gigawords}:-0}' \
						<< 32 | '%{%{Acct-Input-Octets}:-0}', \
					'%{%{Acct-Output-Gigawords}:-0}' \
						<< 32 | '%{%{Acct-Output-Octets}:-0}', \
					'%{Acct-Unique-Session-Id}')"

			#
			#  The update condition matched no existing sessions. Use
			#  the values provided in the update to create a new session.
			#
			query = "call interimUpdateNewSession('%{Acct-Session-Id}', \
					'%{Acct-Unique-Session-Id}', \
					'%{SQL-User-Name}', \
					'%{Realm}', \
					'%{NAS-IP-Address}', \
					'%{%{NAS-Port-ID}:-%{NAS-Port}}', \
					'%{NAS-Port-Type}', \
					%{integer:Event-Timestamp}, \
					%{%{Acct-Session-Time}:-0}, \
					%{%{Acct-Session-Time}:-NULL}, \
					'%{Acct-Authentic}', \
					'%{Connect-Info}', \
					'%{%{Acct-Input-Gigawords}:-0}' << 32 | '%{%{Acct-Input-Octets}:-0}', \
					'%{%{Acct-Output-Gigawords}:-0}' << 32 | '%{%{Acct-Output-Octets}:-0}', \
					'%{Called-Station-Id}', \
					'%{Calling-Station-Id}', \
					'%{Service-Type}', \
					'%{Framed-Protocol}', \
					'%{Framed-IP-Address}', \
					'%{Framed-IPv6-Address}', \
					'%{Framed-IPv6-Prefix}', \
					'%{Framed-Interface-Id}', \
					'%{Delegated-IPv6-Prefix}')"

			#
			#  When using "sql_session_start", you should comment out
			#  the previous query, and enable this one.
			#
			#  Just change the previous query to "-query",
			#  and this one to "query".  The previous one
			#  will be ignored, and this one will be
			#  enabled.
			#
			-query = "call interimUpdate('%{Acct-Session-Id}', \
					'%{Acct-Unique-Session-Id}', \
					'%{Acct-Authentic}', \
					'%{Connect-Info}', \
					'%{Service-Type}', \
					'%{Framed-Protocol}', \
					'%{Framed-IP-Address}', \
					'%{Framed-IPv6-Address}', \
					'%{Framed-IPv6-Prefix}', \
					'%{Framed-Interface-Id}', \
					'%{Delegated-IPv6-Prefix}', \
					%{integer:Event-Timestamp}, \
					%{%{Acct-Session-Time}:-NULL}, \
					'%{%{Acct-Input-Gigawords}:-0}' \
						<< 32 | '%{%{Acct-Input-Octets}:-0}', \
					'%{%{Acct-Output-Gigawords}:-0}' \
						<< 32 | '%{%{Acct-Output-Octets}:-0}', \
					'%{SQL-User-Name}', \
					'%{%{NAS-IPv6-Address}:-%{NAS-IP-Address}}', \
					'%{%{NAS-Port-ID}:-%{NAS-Port}}', \
					'%{NAS-Port-Type}')"

		}

		stop {
			#
			#  Session has terminated, update the stop time and statistics.
			#
			query = "call stopInfoUpdate(FROM_UNIXTIME(\
						%{integer:Event-Timestamp}), \
					%{%{Acct-Session-Time}:-NULL}, \
					'%{%{Acct-Input-Gigawords}:-0}' \
						<< 32 | '%{%{Acct-Input-Octets}:-0}', \
					'%{%{Acct-Output-Gigawords}:-0}' \
						<< 32 | '%{%{Acct-Output-Octets}:-0}', \
					'%{Acct-Terminate-Cause}', \
					'%{Connect-Info}', \
					'%{Acct-Unique-Session-Id}')"

			#
			#  The update condition matched no existing sessions. Use
			#  the values provided in the update to create a new session.
			#
			query = "call stop2('%{Acct-Session-Id}', \
					'%{Acct-Unique-Session-Id}', \
					'%{SQL-User-Name}', \
					'%{Realm}', \
					'%{NAS-IP-Address}', \
					'%{%{NAS-Port-ID}:-%{NAS-Port}}', \
					'%{NAS-Port-Type}', \
					%{integer:Event-Timestamp}, \
					%{%{Acct-Session-Time}:-0}, \
					%{%{Acct-Session-Time}:-NULL}, \
					'%{Acct-Authentic}', \
					'%{Connect-Info}', \
					'%{%{Acct-Input-Gigawords}:-0}' << 32 | '%{%{Acct-Input-Octets}:-0}', \
					'%{%{Acct-Output-Gigawords}:-0}' << 32 | '%{%{Acct-Output-Octets}:-0}', \
					'%{Called-Station-Id}', \
					'%{Calling-Station-Id}', \
					'%{Acct-Terminate-Cause}', \
					'%{Service-Type}', \
					'%{Framed-Protocol}', \
					'%{Framed-IP-Address}', \
					'%{Framed-IPv6-Address}', \
					'%{Framed-IPv6-Prefix}', \
					'%{Framed-Interface-Id}', \
					'%{Delegated-IPv6-Prefix}')"

			#
			#  When using "sql_session_start", you should comment out
			#  the previous query, and enable this one.
			#
			#  Just change the previous query to "-query",
			#  and this one to "query".  The previous one
			#  will be ignored, and this one will be
			#  enabled.
			#
			-query = "call stop(
					'%{Acct-Session-Id}', \
					'%{Acct-Unique-Session-Id}', \
					'%{Acct-Authentic}', \
					'%{Connect-Info}', \
					'%{Service-Type}', \
					'%{Framed-Protocol}', \
					'%{Framed-IP-Address}', \
					'%{Framed-IPv6-Address}', \
					'%{Framed-IPv6-Prefix}', \
					'%{Framed-Interface-Id}', \
					'%{Delegated-IPv6-Prefix}', \
					%{integer:Event-Timestamp}, \
					%{integer:Event-Timestamp}, \
					%{Acct-Session-Time}, \
					'%{%{Acct-Input-Gigawords}:-0}' \
						<< 32 | '%{%{Acct-Input-Octets}:-0}', \
					'%{%{Acct-Output-Gigawords}:-0}' \
						<< 32 | '%{%{Acct-Output-Octets}:-0}', \
					'%{Acct-Terminate-Cause}', \
					'%{Connect-Info}', \
					'%{SQL-User-Name}', \
					'%{%{NAS-IPv6-Address}:-%{NAS-IP-Address}}', \
					'%{%{NAS-Port-ID}:-%{NAS-Port}}', \
					'%{NAS-Port-Type}' \
					)"

		}

		#
		#  No Acct-Status-Type == ignore the packet
		#
		accounting {
			query = "call getTrue()"
		}
	}
}


#######################################################################
# Authentication Logging Queries
#######################################################################
# postauth_query	- Insert some info after authentication
#######################################################################

post-auth {
	# Write SQL queries to a logfile. This is potentially useful for bulk inserts
	# when used with the rlm_sql_null driver.
#	logfile = ${logdir}/post-auth.sql

	query =	"call postAuthInfo( \
			'%{SQL-User-Name}', \
			'%{%{User-Password}:-%{Chap-Password}}', \
			'%{reply:Packet-Type}', \
			'%S')"
}
